1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

For sort basically it just takes the lines in the command.js file and sorts them by letters, wc basically just prints the number of lines and words, and characters in commands.js, uniq just printed out the commands.js file and sorted each line but it only returned each line that was different if it was the same line that wouldn't be printed.

2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

Well, I connected commands.js and wc and I got back 1 1 12 lines, words, and characters. The specific data was outputted because wc is suppose to print out the lines and words and characters of the files/word or whatever and that's what it did.

3. Implement the head command in the commands.js file. The head command outputs the first n lines of a file (you may decide what n is). This function will be similar to cat in structure so it will be helpful to reference.

4. Implement the tail command in the commands.js file. The tail command is the inverse of the head command. It outputs the last n lines of a file (you may decide what n is).

5. It is possible that a user will input a non-existent command to our bash shell. Within commands.js create an errorHandler function which will output an error message if the command cannot be found.

6. In this checkpoint, you encountered built-in JavaScript methods as well as the new ES6 syntax. Review the information below before attempting the programming challenge.

const reverseStr = str => str.split('').reverse().join('');
